(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[366],{4102:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docker",function(){return i(4982)}])},4982:function(e,n,i){"use strict";i.r(n),i.d(n,{__toc:function(){return l}});var s=i(5893),t=i(2673),r=i(3393),a=i(8426);i(9128);var o=i(2643);let l=[{depth:2,value:"First Dockerfile",id:"first-dockerfile"},{depth:3,value:"Extra Comments:",id:"extra-comments"},{depth:2,value:"Building the Image",id:"building-the-image"}];function _createMdxContent(e){let n=Object.assign({h1:"h1",p:"p",h2:"h2",ol:"ol",li:"li",pre:"pre",code:"code",span:"span",a:"a",h3:"h3",ul:"ul",strong:"strong"},(0,o.a)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"Docker first image"}),"\n",(0,s.jsxs)(n.p,{children:["The first step to using Kubernetes is to understand how containerized applications work and how to create them, because kubernetes is an open-source system for automating deployment, scaling, and management of ",(0,s.jsx)("b",{children:"containerized applications"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In this step, we will quickly create a test application and build a Docker image of it. Later, we will run this application to see firsthand what we are doing."}),"\n",(0,s.jsx)(n.h2,{id:"first-dockerfile",children:"First Dockerfile"}),"\n",(0,s.jsx)(n.p,{children:"Today, most backend applications include a Dockerfile in their repository. This practice simplifies local testing across different machines (with multiple developers) and establishes an automated environment. It mitigates the need for complex application setups and eliminates dependencies on specific operating systems."}),"\n",(0,s.jsx)(n.p,{children:"Each application will have unique requirements in its Dockerfile. Here are some examples:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Base Image: Defining the base image for the Docker container, such as FROM python:3.9 for a Python application or FROM node:14 for a Node.js application."}),"\n",(0,s.jsx)(n.li,{children:"OS packages: Some applications require specific OS packages to run properly. So, in the Dockerfile, we install these packages to create the necessary environment."}),"\n",(0,s.jsx)(n.li,{children:"Container Startup Command: Specifying the command to run when the container starts, typically using the CMD instruction to execute the application or a script."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now, to keep it simple, let's create a Dockerfile for our test application that doesn't require any complex setup."}),"\n",(0,s.jsx)(n.p,{children:"In the repository of this application, we have a folder called 'examples.' Navigate to the 'examples/docker' directory, where you will find the following files:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"index.js"}),"\n",(0,s.jsx)(n.li,{children:"package.json"}),"\n",(0,s.jsx)(n.li,{children:"Dockerfile"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The index.js file contains only a getting started of a fastify server, the package.json contains only the fastify dependency and the Dockerfile contains only the basic to install the dependencies and start the app."}),"\n",(0,s.jsx)(n.p,{children:"Now let's focus exclusively on the Dockerfile."}),"\n",(0,s.jsx)(n.pre,{"data-language":"yaml","data-theme":"default",children:(0,s.jsxs)(n.code,{"data-language":"yaml","data-theme":"default",children:[(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"FROM node:20"})}),"\n",(0,s.jsx)(n.span,{className:"line",children:" "}),"\n",(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"WORKDIR /app"})}),"\n",(0,s.jsx)(n.span,{className:"line",children:" "}),"\n",(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"COPY package.json package.json"})}),"\n",(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"COPY package-lock.json package-lock.json"})}),"\n",(0,s.jsx)(n.span,{className:"line",children:" "}),"\n",(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"RUN npm ci"})}),"\n",(0,s.jsx)(n.span,{className:"line",children:" "}),"\n",(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"COPY ./index.js ."})}),"\n",(0,s.jsx)(n.span,{className:"line",children:" "}),"\n",(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'CMD [ "node", "index.js" ]'})})]})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"first line"})," is responsible for defining what type of image will be built on, almost as if we choose which OS our app will run on."]}),"\n",(0,s.jsxs)(n.p,{children:["In this example, we're utilizing a base image of Node.js version 20. This image is built on Debian's Bullseye version. If you're curious about the definition of a Docker base image, you can always refer to the Docker website or the ",(0,s.jsx)(n.a,{href:"https://github.com/nodejs/docker-node/blob/e8dc03502488e162b6860a6adc3ee8e8ae517e87/20/bookworm/Dockerfile",children:"official Node.js Dockerfile"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"second line"})," sets the working directory to '/app' to prevent errors or misplacements, ensuring that all subsequent commands execute within this directory."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"third and fourth lines"})," copy the application's dependency files into the container. Subsequently, the ",(0,s.jsx)("b",{children:"fifth line"})," runs 'npm ci', which installs only the necessary dependencies without dev dependencies. While we could also copy 'node_modules', 'npm ci' is preferred for minimizing the image size by excluding unnecessary dependencies."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)("b",{children:"sixth line"})," copies our application into the image, while the last line executes the command to start our app."]}),"\n",(0,s.jsx)(n.h3,{id:"extra-comments",children:"Extra Comments:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Multiple Steps for Production Environments"}),": In production environments, consider using multiple steps in the Dockerfile. This approach results in smaller and less vulnerable images. More information can be found ",(0,s.jsx)(n.a,{href:"https://docs.docker.com/build/building/multi-stage/",children:"here"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Handling Private npm Registries"}),": Companies often use private npm registries to store npm packages. Additional steps may be required to handle npm authentication. For npm registries from npm itself, refer to ",(0,s.jsx)(n.a,{href:"https://docs.npmjs.com/docker-and-private-modules",children:"this guide"}),". For private registries from other sources (e.g., Azure), utilize the .npmrc file and the NPM_TOKEN environment variable for critical information. Learn how to create the .npmrc file ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/devops/artifacts/npm/npmrc?view=azure-devops&tabs=windows%2Cclassic",children:"here"})," and how to use it inside the Dockerfile ",(0,s.jsx)(n.a,{href:"https://www.mimiz.fr/npm-azure-devops-doker-authentication",children:"here"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Custom Entrypoint"}),": The entrypoint can be simple or anything that your need/want. For instance, if your app requires running a script before startup, this is the place to define it."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"building-the-image",children:"Building the Image"}),"\n",(0,s.jsx)(n.p,{children:"With everything in place, let's build our image and run it locally for testing. First, ensure that Docker is installed and running on your system."}),"\n",(0,s.jsx)(n.p,{children:"To build the image, follow these steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Open your terminal and navigate to the 'examples/docker' folder."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Run ",(0,s.jsx)(n.code,{children:"ls"})," to confirm that you are inside the 'examples/docker' folder."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run the command:"}),"\n",(0,s.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,s.jsx)(n.code,{"data-language":"text","data-theme":"default",children:(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"docker build -t somename/backend-00 ."})})})}),"\n",(0,s.jsx)(n.p,{children:"This command builds the image. The name 'somename/backend-00' is arbitrary for now but will become important in the future. Don't forget to include the dot at the end of the command."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'After successful build, you should see a message like "naming to docker.io/somename/backend-00". This indicates that the image is now available in your local Docker registry. You can verify this by running:'}),"\n",(0,s.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,s.jsx)(n.code,{"data-language":"text","data-theme":"default",children:(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"docker images"})})})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Now, run the app using the command:"}),"\n",(0,s.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,s.jsx)(n.code,{"data-language":"text","data-theme":"default",children:(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"docker run -d -p 3000:3000 somename/backend-00"})})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"-d"})," flag runs the container in detach mode, docker will start your container and return you to the terminal prompt."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"-p 3000:3000"})," flag binds port 3000 of the container to TCP port 3000 on 127.0.0.1 of the host. More information ",(0,s.jsx)(n.a,{href:"https://docs.docker.com/reference/cli/docker/container/run/#publish",children:"here"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Replace ",(0,s.jsx)(n.code,{children:"somename/backend-00"})," with the image name. You can specify a version like ",(0,s.jsx)(n.code,{children:"somename/backend-00:v1"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"To view the logs of the container, use:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"docker ps"})," to list all running containers and get the container id."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"docker logs <container_id>"})," to view logs."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"docker logs -f <container_id>"})," to follow the logs continuously."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"To stop the container:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"docker ps"})," to list all running containers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"docker stop <container_id>"})," or ",(0,s.jsx)(n.code,{children:"docker kill <container_id>"}),". The former stops the container gracefully, while the latter kills the process immediately."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Now you're ready to move on to the ",(0,s.jsx)(n.a,{href:"/kind",children:"next step!"})," \uD83D\uDE0A"]})]})}let c={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.a)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/docker.mdx",route:"/docker",timestamp:1713531996e3,pageMap:[{kind:"MdxPage",name:"about",route:"/about"},{kind:"Folder",name:"deployment",route:"/deployment",children:[{kind:"MdxPage",name:"update",route:"/deployment/update"},{kind:"Meta",data:{update:"Update"}}]},{kind:"MdxPage",name:"deployment",route:"/deployment"},{kind:"MdxPage",name:"docker",route:"/docker"},{kind:"MdxPage",name:"index",route:"/"},{kind:"MdxPage",name:"kind",route:"/kind"},{kind:"MdxPage",name:"pod",route:"/pod"},{kind:"MdxPage",name:"service",route:"/service"},{kind:"Meta",data:{index:"Kubernetes getting started",docker:"Docker",kind:"kind",pod:"Pod",deployment:"Deployment",service:"Service",about:{display:"hidden",title:"About"}}}],flexsearch:{codeblocks:!0},title:"Docker first image",headings:l},pageNextRoute:"/docker",nextraLayout:r.ZP,themeConfig:a.Z};n.default=(0,t.j)(c)},8426:function(e,n,i){"use strict";var s=i(5893);i(7294);let t={logo:(0,s.jsx)("span",{children:"K8s first guide"}),project:{link:"https://github.com/lukaskaska/k8s-first-guide"},docsRepositoryBase:"https://github.com/lukaskaska/k8s-first-guide",footer:{text:"Kubernetes first guide"}};n.Z=t},5789:function(){}},function(e){e.O(0,[774,890,888,179],function(){return e(e.s=4102)}),_N_E=e.O()}]);